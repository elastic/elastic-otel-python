name: ci

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/env-install
    - uses: pre-commit/action@v3.0.1

  license-header-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: ./scripts/license_headers_check.sh

  pip-installable:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/env-install
    - run: pip install -e .

  pip-licenses:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/env-install
    - run: pip install -e .
    - run: pip install pip-licenses
    - run: pip-licenses

  operator-image-buildable:
    env:
      USE_ELASTIC_REGISTRY: ${{ github.event_name != 'pull_request' || ( github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false && github.actor != 'dependabot[bot]' ) }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/env-install
    - run: pip install build
    - run: python -m build
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
    - name: Log in to the Elastic Container registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ${{ secrets.ELASTIC_DOCKER_REGISTRY }}
        username: ${{ secrets.ELASTIC_DOCKER_USERNAME }}
        password: ${{ secrets.ELASTIC_DOCKER_PASSWORD }}
      if: ${{ env.USE_ELASTIC_REGISTRY == 'true' }}
    - run: docker build -f operator/Dockerfile --build-arg DISTRO_DIR=./dist .
      if: ${{ env.USE_ELASTIC_REGISTRY == 'true' }}
    - run: docker build -f operator/Dockerfile --build-arg PYTHON_GLIBC_IMAGE=cgr.dev/chainguard/python --build-arg PYTHON_GLIBC_IMAGE_VERSION=latest-dev --build-arg DISTRO_DIR=./dist --build-arg IMAGE=cgr.dev/chainguard/bash --build-arg IMAGE_VERSION=latest .
      if: ${{ env.USE_ELASTIC_REGISTRY != 'true'}}

  test:
    runs-on: ubuntu-latest
    env:
      py39: "3.9"
      py310: "3.10"
      py311: "3.11"
      py312: "3.12"
      py313: "3.13"
    strategy:
      fail-fast: false
      matrix:
        python-version: [py39, py310, py311, py312, py313]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ env[matrix.python-version] }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env[matrix.python-version] }}
        architecture: "x64"
    - run: pip install -r dev-requirements.txt
    - name: run recorded tests with python 3.10+ where urllib3 2.x is supported
      run: pip install pytest-vcr
      if: ${{ env[matrix.python-version] != "3.9" }}
    - run: pytest --with-integration-tests

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/env-install
      - run: pip install -r dev-requirements.txt
      - run: pip install pyright
      - run: pyright
